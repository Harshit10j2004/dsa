lass Node {
    int data;
    Node left, right;

    Node(int val) {
        data = val;
        left = right = null;
    }
}

class Solution {
    
    void mirror(Node node) {
        if (node == null) return;

        
        mirror(node.left);
        mirror(node.right);

        
        Node temp = node.left;
        node.left = node.right;
        node.right = temp;
    }

    // Utility function for inorder traversal
    void inorder(Node node) {
        if (node == null) return;
        inorder(node.left);
        System.out.print(node.data + " ");
        inorder(node.right);
    }

    
    public static void main(String[] args) {
        Solution tree = new Solution();

        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.right.left = new Node(4);

        System.out.println("Original Tree (Inorder):");
        tree.inorder(root);

        tree.mirror(root);

        System.out.println("\nMirrored Tree (Inorder):");
        tree.inorder(root);
    }
}
